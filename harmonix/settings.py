"""
Django settings for harmonix project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Load environment-driven configuration with safe development fallbacks
from django.core.exceptions import ImproperlyConfigured

# Environment marker (development|production)
ENV = os.getenv('ENV', 'development')

# Debug: Print environment info (remove in production)
if ENV == 'development':
    print(f"Environment: {ENV}")
    print(f"DEBUG: {os.getenv('DEBUG', 'Not Set')}")
    print(f"ALLOWED_HOSTS env: {os.getenv('ALLOWED_HOSTS', 'Not Set')}")

def env_bool(name, default=False):
    val = os.getenv(name)
    if val is None:
        return default
    return str(val).lower() in ("1", "true", "yes")

def env_list(name, default=""):
    return [p.strip() for p in os.getenv(name, default).split(",") if p.strip()]

# DEBUG defaults to True for local development, False for production
DEBUG = env_bool('DEBUG', default=(ENV != 'production'))

# SECRET_KEY must be set in production; use a local fallback for dev only
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    if ENV == 'production' or not DEBUG:
        raise ImproperlyConfigured('SECRET_KEY is required in production')
    # Local development fallback (keep in-memory only)
    SECRET_KEY = 'django-insecure-local-dev-key'

# Hosts allowed to serve the app (comma-separated in env)
ALLOWED_HOSTS = env_list('ALLOWED_HOSTS', 'localhost,127.0.0.1')

# CSRF Trusted Origins - must include protocol (https://) for production
CSRF_TRUSTED_ORIGINS = env_list('CSRF_TRUSTED_ORIGINS', 'http://localhost:8000,http://127.0.0.1:8000')

# Auto-add common deployment domains if not explicitly set
if ENV == 'production':
    if not os.getenv('ALLOWED_HOSTS'):
        # Temporary: Allow all hosts (CHANGE THIS TO YOUR ACTUAL DOMAIN)
        ALLOWED_HOSTS = ['*']
        # TODO: Replace '*' with your actual Render domain, e.g., ['your-app.onrender.com']
    
    # Auto-add CSRF trusted origins for production if not explicitly set
    if not os.getenv('CSRF_TRUSTED_ORIGINS'):
        # Add your production domains with HTTPS protocol
        CSRF_TRUSTED_ORIGINS = [
            'https://*.onrender.com',  # Render domains (wildcard for testing)
        ]
else:
    # Development fallback - allow all hosts for local testing
    if not ALLOWED_HOSTS or ALLOWED_HOSTS == ['']:
        ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'accounts',
    'listings',
    'applications',
]

AUTH_USER_MODEL = 'accounts.User'

# Security cookie settings â€” toggle for production
if ENV == 'production' or not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
else:
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise should come directly after SecurityMiddleware when used
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', #used in forms
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'harmonix.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'harmonix.wsgi.application'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'listings:feed'
LOGOUT_REDIRECT_URL = 'login'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration using Supabase Session Pooler
DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL', 'sqlite:///db.sqlite3'),
        conn_max_age=600,
        ssl_require=ENV == 'production',  # Only require SSL in production
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Global static directories
# Development - where Django looks for static files

STATICFILES_DIRS = [
    BASE_DIR / 'static',  # global static folder
]

# Production - where collectstatic puts all static files

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Use WhiteNoise storage for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGIN_URL = 'login'